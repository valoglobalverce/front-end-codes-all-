import heapq

# Read weighted undirected graph
graph = {}
n = int(input("Enter number of edges: "))
for _ in range(n):
    u, v, w = input().split()
    w = float(w)
    graph.setdefault(u, []).append((v, w))
    graph.setdefault(v, []).append((u, w))

# Read heuristic values
heuristics = {}
m = int(input("Enter number of nodes for heuristics: "))
for _ in range(m):
    node, h = input().split()
    heuristics[node] = float(h)

# Best-First Search
def best_first_search(graph, heuristics, start, goal):
    visited = set()
    pq = []
    heapq.heappush(pq, (heuristics[start], start))
    while pq:
        _, node = heapq.heappop(pq)
        print(node)
        if node == goal:
            print("Goal reached!")
            return
        visited.add(node)
        for neighbor, weight in graph.get(node, []):
            if neighbor not in visited:
                heapq.heappush(pq, (heuristics[neighbor], neighbor))
    print("Goal not reachable.")

# Run
start = input("Enter start node: ").strip()
goal = input("Enter goal node: ").strip()
best_first_search(graph, heuristics, start, goal)
